<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.kiwihouse.dao.mapper.AuthUserMapper">
    <resultMap id="BaseResultMap" type="com.kiwihouse.dao.entity.AuthUser">
        <id column="UID" jdbcType="INTEGER" property="uid"/>
        <result column="USERNAME" jdbcType="VARCHAR" property="username"/>
        <result column="PASSWORD" jdbcType="VARCHAR" property="password"/>
        <result column="SALT" jdbcType="VARCHAR" property="salt"/>
        <result column="REAL_NAME" jdbcType="VARCHAR" property="realName"/>
        <result column="AVATAR" jdbcType="VARCHAR" property="avatar"/>
        <result column="PHONE" jdbcType="VARCHAR" property="phone"/>
        <result column="EMAIL" jdbcType="VARCHAR" property="email"/>
        <result column="SEX" jdbcType="TINYINT" property="sex"/>
        <result column="STATUS" jdbcType="TINYINT" property="status"/>
        <result column="CREATE_TIME" jdbcType="TIMESTAMP" property="createTime"/>
        <result column="UPDATE_TIME" jdbcType="TIMESTAMP" property="updateTime"/>
        <result column="CREATE_WHERE" jdbcType="TINYINT" property="createWhere"/>
        <result column="IS_ADMIN" jdbcType="INTEGER" property="isAdmin" />
        <result column="ROLE_ID" jdbcType="INTEGER" property="roleId" />
   		<result column="GROUP_IDS" jdbcType="VARCHAR" property="groupIds" />
    </resultMap>
    <resultMap id="AuthUserResultMap" type="com.kiwihouse.dao.entity.AuthUser"></resultMap>
    <sql id="Base_Column_List">
    UID, USERNAME, PASSWORD, SALT, REAL_NAME, AVATAR, PHONE, EMAIL, SEX, STATUS, CREATE_TIME, 
    UPDATE_TIME, CREATE_WHERE, IS_ADMIN, GROUP_IDS
  </sql>
    <select id="selectByPrimaryKey"  resultMap="AuthUserResultMap">
        select
       <include refid="Base_Column_List"/>
        from auth_user
        where UID = #{uid,jdbcType=INTEGER}
    </select>
    <select id="selectByUsername" parameterType="java.lang.String" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from auth_user
        where USERNAME = #{username,jdbcType=VARCHAR}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
    delete from auth_user
    where UID = #{uid,jdbcType=INTEGER}
  </delete>
    <insert id="insert" parameterType="com.kiwihouse.dao.entity.AuthUser">
    insert into auth_user (UID, USERNAME, PASSWORD,
      SALT, REAL_NAME, AVATAR,
      PHONE, EMAIL, SEX,
      STATUS, CREATE_TIME, UPDATE_TIME,
      CREATE_WHERE)
    values (#{uid,jdbcType=INTEGER}, #{username,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR},
      #{salt,jdbcType=VARCHAR}, #{realName,jdbcType=VARCHAR}, #{avatar,jdbcType=VARCHAR}, 
      #{phone,jdbcType=VARCHAR}, #{email,jdbcType=VARCHAR}, #{sex,jdbcType=TINYINT}, 
      #{status,jdbcType=TINYINT}, #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP}, 
      #{createWhere,jdbcType=TINYINT})
  </insert>
    <insert id="insertSelective" parameterType="com.kiwihouse.dao.entity.AuthUser">
        insert into auth_user
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="uid != null">
                UID,
            </if>
            <if test="username != null">
                USERNAME,
            </if>
            <if test="password != null">
                PASSWORD,
            </if>
            <if test="salt != null">
                SALT,
            </if>
            <if test="realName != null">
                REAL_NAME,
            </if>
            <if test="avatar != null">
                AVATAR,
            </if>
            <if test="phone != null">
                PHONE,
            </if>
            <if test="email != null">
                EMAIL,
            </if>
            <if test="sex != null">
                SEX,
            </if>
            <if test="status != null">
                STATUS,
            </if>
            <if test="createTime != null">
                CREATE_TIME,
            </if>
            <if test="updateTime != null">
                UPDATE_TIME,
            </if>
            <if test="createWhere != null">
                CREATE_WHERE,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="uid != null">
                #{uid,jdbcType=INTEGER},
            </if>
            <if test="username != null">
                #{username,jdbcType=VARCHAR},
            </if>
            <if test="password != null">
                #{password,jdbcType=VARCHAR},
            </if>
            <if test="salt != null">
                #{salt,jdbcType=VARCHAR},
            </if>
            <if test="realName != null">
                #{realName,jdbcType=VARCHAR},
            </if>
            <if test="avatar != null">
                #{avatar,jdbcType=VARCHAR},
            </if>
            <if test="phone != null">
                #{phone,jdbcType=VARCHAR},
            </if>
            <if test="email != null">
                #{email,jdbcType=VARCHAR},
            </if>
            <if test="sex != null">
                #{sex,jdbcType=TINYINT},
            </if>
            <if test="status != null">
                #{status,jdbcType=TINYINT},
            </if>
            <if test="createTime != null">
                #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="updateTime != null">
                #{updateTime,jdbcType=TIMESTAMP},
            </if>
            <if test="createWhere != null">
                #{createWhere,jdbcType=TINYINT},
            </if>
        </trim>
    </insert>
    <update id="updateByPrimaryKeySelective" parameterType="com.kiwihouse.dao.entity.AuthUser">
        update auth_user
        <set>
            <if test="username != null">
                USERNAME = #{username,jdbcType=VARCHAR},
            </if>
            <if test="password != null">
                PASSWORD = #{password,jdbcType=VARCHAR},
            </if>
            <if test="salt != null">
                SALT = #{salt,jdbcType=VARCHAR},
            </if>
            <if test="realName != null">
                REAL_NAME = #{realName,jdbcType=VARCHAR},
            </if>
            <if test="avatar != null">
                AVATAR = #{avatar,jdbcType=VARCHAR},
            </if>
            <if test="phone != null">
                PHONE = #{phone,jdbcType=VARCHAR},
            </if>
            <if test="email != null">
                EMAIL = #{email,jdbcType=VARCHAR},
            </if>
            <if test="sex != null">
                SEX = #{sex,jdbcType=TINYINT},
            </if>
            <if test="status != null">
                STATUS = #{status,jdbcType=TINYINT},
            </if>
            <if test="createTime != null">
                CREATE_TIME = #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="updateTime != null">
                UPDATE_TIME = #{updateTime,jdbcType=TIMESTAMP},
            </if>
            <if test="createWhere != null">
                CREATE_WHERE = #{createWhere,jdbcType=TINYINT},
            </if>
        </set>
        where uid = #{uid,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.kiwihouse.dao.entity.AuthUser">
    update auth_user
    set USERNAME = #{username,jdbcType=VARCHAR},
      PASSWORD = #{password,jdbcType=VARCHAR},
      SALT = #{salt,jdbcType=VARCHAR},
      REAL_NAME = #{realName,jdbcType=VARCHAR},
      AVATAR = #{avatar,jdbcType=VARCHAR},
      PHONE = #{phone,jdbcType=VARCHAR},
      EMAIL = #{email,jdbcType=VARCHAR},
      SEX = #{sex,jdbcType=TINYINT},
      STATUS = #{status,jdbcType=TINYINT},
      CREATE_TIME = #{createTime,jdbcType=TIMESTAMP},
      UPDATE_TIME = #{updateTime,jdbcType=TIMESTAMP},
      CREATE_WHERE = #{createWhere,jdbcType=TINYINT}
    where UID = #{uid,jdbcType=INTEGER}
  </update>

    <select id="selectUserRoles" parameterType="java.lang.String" resultType="java.lang.String">
    SELECT GROUP_CONCAT(rol.CODE) AS Roles
    FROM auth_user AS usr
    JOIN auth_user_role uro ON usr.UID = uro.USER_ID
    JOIN auth_role rol ON uro.ROLE_ID = rol.ID
    WHERE usr.UID = #{uid,jdbcType=INTEGER}
  </select>

    <select id="selectUserRolesByUsername" parameterType="java.lang.String" resultType="java.lang.String">
    SELECT GROUP_CONCAT(rol.CODE) AS Roles
    FROM auth_user AS usr
    JOIN auth_user_role uro ON usr.UID = uro.USER_ID
    JOIN auth_role rol ON uro.ROLE_ID = rol.ID
    WHERE usr.USERNAME = #{username,jdbcType=VARCHAR}
  </select>


    <select id="selectUserList" resultMap="BaseResultMap">
    select UID,USERNAME,"" as PASSWORD,"" as SALT,REAL_NAME,AVATAR,PHONE,EMAIL,SEX,STATUS,CREATE_TIME,UPDATE_TIME,CREATE_WHERE
    from auth_user
  </select>

    <select id="selectUserListByRoleId" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select b.UID,b.USERNAME,"" as PASSWORD,"" as SALT,b.REAL_NAME,b.AVATAR,b.PHONE,b.EMAIL,b.SEX,b.STATUS,b.CREATE_TIME,b.UPDATE_TIME,b.CREATE_WHERE
    from auth_user_role a
    join auth_user b on a.USER_ID = b.UID
    where a.ROLE_ID = #{roleId}
  </select>

    <select id="selectUserListExtendByRoleId" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select b.UID,b.USERNAME,"" as PASSWORD,"" as SALT,b.REAL_NAME,b.AVATAR,b.PHONE,b.EMAIL,b.SEX,b.STATUS,b.CREATE_TIME,b.UPDATE_TIME,b.CREATE_WHERE
    from auth_user b
	where not exists (
  	   select 1 from auth_user_role c
  	   where b.UID = c.USER_ID and c.ROLE_ID = #{roleId,jdbcType=INTEGER}
	)
  </select>
  
  <select id="queryUserIds" resultType="java.lang.String" parameterType="java.lang.String">
        select user_id from user where admin_id in (select distinct admin_id from parent_admin where parent_id = #{adminId} or admin_id = #{adminId})
   </select>

</mapper>