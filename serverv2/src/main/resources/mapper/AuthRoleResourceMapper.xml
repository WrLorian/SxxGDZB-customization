<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.kiwihouse.dao.mapper.AuthRoleResourceMapper">
  <resultMap id="BaseResultMap" type="com.kiwihouse.dao.entity.AuthRoleResource">
    <id column="ID" jdbcType="INTEGER" property="id" />
    <result column="ROLE_ID" jdbcType="INTEGER" property="roleId" />
    <result column="RESOURCE_ID" jdbcType="INTEGER" property="resourceId" />
    <result column="CREATE_TIME" jdbcType="TIMESTAMP" property="createTime" />
    <result column="UPDATE_TIME" jdbcType="TIMESTAMP" property="updateTime" />
  </resultMap>
  <resultMap id="AuthRoleResourceVotMap" type="com.kiwihouse.domain.vo.AuthRoleResourceVo">
  
  </resultMap>
  <sql id="Base_Column_List">
    ID, ROLE_ID, RESOURCE_ID, CREATE_TIME, UPDATE_TIME
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from auth_role_resource
    where ID = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from auth_role_resource
    where ID = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" keyColumn="ID" keyProperty="id" parameterType="com.kiwihouse.dao.entity.AuthRoleResource" useGeneratedKeys="true">
    insert into auth_role_resource (ROLE_ID, RESOURCE_ID, CREATE_TIME, 
      UPDATE_TIME)
    values (#{roleId,jdbcType=INTEGER}, #{resourceId,jdbcType=INTEGER}, #{createTime,jdbcType=TIMESTAMP}, 
      #{updateTime,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" keyColumn="ID" keyProperty="id" parameterType="com.kiwihouse.dao.entity.AuthRoleResource" useGeneratedKeys="true">
    insert into auth_role_resource
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="roleId != null">
        ROLE_ID,
      </if>
      <if test="resourceId != null">
        RESOURCE_ID,
      </if>
      <if test="createTime != null">
        CREATE_TIME,
      </if>
      <if test="updateTime != null">
        UPDATE_TIME,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="roleId != null">
        #{roleId,jdbcType=INTEGER},
      </if>
      <if test="resourceId != null">
        #{resourceId,jdbcType=INTEGER},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.kiwihouse.dao.entity.AuthRoleResource">
    update auth_role_resource
    <set>
      <if test="roleId != null">
        ROLE_ID = #{roleId,jdbcType=INTEGER},
      </if>
      <if test="resourceId != null">
        RESOURCE_ID = #{resourceId,jdbcType=INTEGER},
      </if>
      <if test="createTime != null">
        CREATE_TIME = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        UPDATE_TIME = #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where ID = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.kiwihouse.dao.entity.AuthRoleResource">
    update auth_role_resource
    set ROLE_ID = #{roleId,jdbcType=INTEGER},
      RESOURCE_ID = #{resourceId,jdbcType=INTEGER},
      CREATE_TIME = #{createTime,jdbcType=TIMESTAMP},
      UPDATE_TIME = #{updateTime,jdbcType=TIMESTAMP}
    where ID = #{id,jdbcType=INTEGER}
  </update>
  <delete id="deleteByUniqueKey">
    delete from auth_role_resource
    where role_id = #{roleId,jdbcType=INTEGER} and resource_id = #{resourceId,jdbcType=INTEGER}
  </delete>
  
  <select id="selectRoleResourceCount" parameterType="java.lang.Integer" resultType="Integer">
    		<choose>
  			<when test="auRoleResourceVo.trigger ==1 ">
				SELECT count(*)  
				FROM auth_role_resource arr 
				INNER JOIN auth_resource ar on arr.RESOURCE_ID = ar.ID 
				WHERE arr.RESOURCE_ID not in(SELECT RESOURCE_ID FROM auth_role_resource WHERE ROLE_ID = #{auRoleResourceVo.roleId})
  			</when>
  			<when test="auRoleResourceVo.trigger ==2 ">
				SELECT count(*) FROM (SELECT ar.ID,ar.`CODE` resCode,ar.`NAME` as resName   
				FROM auth_role_resource arr 
				INNER JOIN auth_resource ar on arr.RESOURCE_ID = ar.ID 
				GROUP BY ar.ID) as tem
  			</when>
  			<when test="auRoleResourceVo.trigger ==3 ">
				SELECT count(*) FROM (SELECT ar.ID,ar.`CODE` resCode,ar.`NAME` as resName ,arole.`CODE` roleCode,arole.`NAME` as roleName,arole.ID as 'roleId'  FROM auth_role_resource arr 
				INNER JOIN auth_resource ar on arr.RESOURCE_ID = ar.ID 
				INNER JOIN auth_role arole on arr.ROLE_ID = arole.ID where 1 = 1 AND arole.ID = #{auRoleResourceVo.roleId}) as tem
  			</when>
  			 <otherwise>
  			 	SELECT count(*)  FROM auth_role_resource arr 
				INNER JOIN auth_resource ar on arr.RESOURCE_ID = ar.ID 
				INNER JOIN auth_role arole on arr.ROLE_ID = arole.ID where 1 = 1
					<if test="auRoleResourceVo.resCode!=null and auRoleResourceVo.resCode !=''">
		    			AND ar.`CODE` = #{auRoleResourceVo.resCode}
		    		</if>
		    		<if test="auRoleResourceVo.resName!=null and auRoleResourceVo.resName !=''">
		    			AND ar.`NAME` like CONCAT('%', #{auRoleResourceVo.resName}, '%') 
		    		</if>
		    		<if test="auRoleResourceVo.roleCode!=null and auRoleResourceVo.roleCode!=''">
		    			AND arole.`CODE` = #{auRoleResourceVo.roleCode}
		    		</if>
		    		<if test="auRoleResourceVo.roleName!=null and auRoleResourceVo.roleName!=''">
		    			AND arole.`NAME` like CONCAT('%',  #{auRoleResourceVo.roleName}, '%') 
		    		</if>
		    		<if test="auRoleResourceVo.roleId!=null and auRoleResourceVo.roleId !=''">
		    			AND arr.role_id >= #{auRoleResourceVo.roleId}
		    		</if>
		    	
             </otherwise>
  		</choose>
  </select> 
  
  <select id="selectRoleResourceList" resultMap="AuthRoleResourceVotMap" >
  	<choose>
  			<when test="auRoleResourceVo.trigger ==1 ">
				SELECT ar.ID,ar.`CODE` resCode,ar.`NAME` as resName   
				FROM auth_role_resource arr 
				INNER JOIN auth_resource ar on arr.RESOURCE_ID = ar.ID 
				WHERE arr.RESOURCE_ID not in(SELECT RESOURCE_ID FROM auth_role_resource WHERE ROLE_ID = #{auRoleResourceVo.roleId})
				GROUP BY ar.ID
  			</when>
  			<when test="auRoleResourceVo.trigger ==2 ">
				SELECT ar.ID,ar.`CODE` resCode,ar.`NAME` as resName   
				FROM auth_role_resource arr 
				INNER JOIN auth_resource ar on arr.RESOURCE_ID = ar.ID 
				GROUP BY ar.ID
  			</when>
  			<when test="auRoleResourceVo.trigger ==3 ">
				SELECT ar.ID,ar.`CODE` resCode,ar.`NAME` as resName ,arole.`CODE` roleCode,arole.`NAME` as roleName,arole.ID as 'roleId'  FROM auth_role_resource arr 
				INNER JOIN auth_resource ar on arr.RESOURCE_ID = ar.ID 
				INNER JOIN auth_role arole on arr.ROLE_ID = arole.ID where 1 = 1 AND arole.ID = #{auRoleResourceVo.roleId}
  			</when>
  			 <otherwise>
  			 	SELECT arr.ID,ar.`CODE` resCode,ar.`NAME` as resName ,arole.`CODE` roleCode,arole.`NAME` as roleName,arole.ID as 'roleId'  FROM auth_role_resource arr 
				INNER JOIN auth_resource ar on arr.RESOURCE_ID = ar.ID 
				INNER JOIN auth_role arole on arr.ROLE_ID = arole.ID where 1 = 1
		    		<if test="auRoleResourceVo.resCode!=null and auRoleResourceVo.resCode !=''">
		    			AND ar.`CODE` = #{auRoleResourceVo.resCode}
		    		</if>
		    		<if test="auRoleResourceVo.resName!=null and auRoleResourceVo.resName !=''">
		    			AND ar.`NAME` like CONCAT('%', #{auRoleResourceVo.resName}, '%') 
		    		</if>
		    		<if test="auRoleResourceVo.roleCode!=null and auRoleResourceVo.roleCode!=''">
		    			AND arole.`CODE` = #{auRoleResourceVo.roleCode}
		    		</if>
		    		<if test="auRoleResourceVo.roleName!=null and auRoleResourceVo.roleName!=''">
		    			AND arole.`NAME` like CONCAT('%',  #{auRoleResourceVo.roleName}, '%') 
		    		</if>
		    		<if test="auRoleResourceVo.roleId!=null and auRoleResourceVo.roleId !=''">
		    			AND arr.role_id >= #{auRoleResourceVo.roleId}
		    		</if>
             </otherwise>
  		</choose>
		<if test="limit != null">
			LIMIT #{page},#{limit}
		</if>
  </select>
  
  <insert id="insertBatch" parameterType="java.util.List">
		insert into auth_role_resource(ROLE_ID,RESOURCE_ID)
		values
		<foreach item="resource" collection="list" index="index"  separator="," >
			(#{resource.roleId},
			#{resource.resourceId})
		</foreach>
  </insert>
  
  <delete id="deleteBatch">
		delete from auth_role_resource where id in(
		<foreach collection="array" item="id" separator="," index="index">
            #{id}
        </foreach>
        )
  </delete>

  <insert id="insertOrUpdateBatch"
            parameterType="com.kiwihouse.dao.entity.AuthRoleResource" keyProperty="id" useGeneratedKeys="true">
        INSERT INTO auth_role_resource
        (ROLE_ID,
         RESOURCE_ID,
         CREATE_TIME,
         UPDATE_TIME)
         VALUES
        <foreach item="t" collection="list" index="index"  separator="," >
			(
			#{t.roleId},
			#{t.resourceId},
			NOW(),
			null
			)
		</foreach>
         
		ON DUPLICATE KEY UPDATE 
		ROLE_ID = values(ROLE_ID),
		RESOURCE_ID = VALUES(RESOURCE_ID),
		UPDATE_TIME = VALUES(UPDATE_TIME)
    </insert>
	<delete id="deleteByRoleId" parameterType="java.lang.Integer" >
    delete from auth_role_resource
    where role_id = #{roleId,jdbcType=INTEGER} 
  </delete>
</mapper>